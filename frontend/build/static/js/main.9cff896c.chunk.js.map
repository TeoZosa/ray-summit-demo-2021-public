{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["addResponseMessage","Wrapper","styled","div","Embed","iframe","InnerApp","useLocation","pathname","handleNewUserMessage","newMessage","a","toggleMsgLoader","axios","get","params","msg","finally","res","data","renderCustomComponent","Message","src","name","title","subtitle","senderPlaceHolder","message","link","header","d","Date","time","useRef","toLocaleTimeString","hour","minute","isLocalLink","includes","className","to","onClick","window","frames","location","href","target","rel","current","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAeAA,6BAAmB,sGAEnB,IAAMC,EAAUC,IAAOC,IAAV,mFAMPC,EAAQF,IAAOG,OAAV,6EAqBX,SAASC,IAEUC,cAAcC,SAA/B,IAEMC,EAAoB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAC3BC,4BAD2B,SAETC,IAAMC,IAAI,QAAS,CACnCC,OAAQ,CACNC,IAAKN,KAENO,SAAQ,WACTL,+BAPyB,OAErBM,EAFqB,OAUrBC,EAAOD,EAAIC,KASjBC,gCAAsBC,EAASF,GAAM,GAnBV,2CAAH,sDAsB1B,OACE,eAAClB,EAAD,WAEE,cAACG,EAAD,CAAOkB,IAAG,iBAAoBC,KAAK,SAEnC,cAAC,SAAD,CACEC,MAAM,kBACNC,SAAS,4BACTC,kBAAkB,uBAElBjB,qBAAsBA,OAO9B,IAAMY,EAAU,SAAC,GAA4C,IAA1CM,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,OAC1BC,EAAI,IAAIC,KACRC,EAAOC,iBAAOH,EAAEI,mBAAmB,GAAI,CAAEC,KAAM,UAAWC,OAAQ,aAElEC,GAAeT,EAAKU,SAAS,QAC7B9B,EAAWD,cAAcC,SAE/B,OAAO,mCACL,sBAAK+B,UAAU,eAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,4BAAIZ,IACHU,EACC,eAAC,IAAD,CAAMG,GAAIZ,EAAMa,QAAS,WACnBb,EAAKU,SAAS9B,KAEfkC,OAAOC,OAAP,KAAqCC,SAAtC,6BAAuEhB,KAH3E,cAKKC,EALL,OAME,mBAAGgB,KAAMjB,EAAMkB,OAAO,SAASC,IAAI,aAAnC,SAAiDlB,OAIvD,sBAAMU,UAAU,gBAAhB,SAAiCP,EAAKgB,gBAK7BC,EA9EH,WACV,OACE,cAAC,IAAD,UACE,cAAC3C,EAAD,OCzBS4C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9cff896c.chunk.js","sourcesContent":["import { useRef } from 'react';\nimport './App.css';\n\nimport { Widget, addResponseMessage, toggleWidget, toggleMsgLoader, renderCustomComponent } from 'react-chat-widget';\n\nimport 'react-chat-widget/lib/styles.css';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport {\n  BrowserRouter as Router,\n  Link,\n  useLocation\n} from \"react-router-dom\";\n\n\naddResponseMessage(\"Hello! I'm here to help answer questions you might have about Ray. What can I help you with today?\")\n\nconst Wrapper = styled.div`\n  overflow:hidden;\n  width: 100vw;\n  height: 100vh;\n`\n\nconst Embed = styled.iframe`\n  width: 100vw;\n  height: 100vh;\n  border: 0;\n`\n\ninterface APIResponse {\n  message: string;\n  header: string;\n  link: string;\n}\n\n\nconst App = () => {\n  return (\n    <Router>\n      <InnerApp />\n    </Router>\n  )\n}\n\nfunction InnerApp() {\n\n  const pathname = useLocation().pathname\n\n  const handleNewUserMessage = async (newMessage: string) => {\n    toggleMsgLoader()\n    const res = await axios.get(\"/chat\", {\n      params: {\n        msg: newMessage\n      }\n    }).finally(() => {\n      toggleMsgLoader()\n    })\n\n    const data = res.data\n    // TEST DATA:\n    // const data: APIResponse = {\n    //   message: \"Here\",\n    //   header: \"API page\",\n    //   // link: \"/en/master/package-ref.html\"\n    //   link: \"https://www.google.com\"\n    // }\n\n    renderCustomComponent(Message, data, true)\n  };\n\n  return (\n    <Wrapper>\n\n      <Embed src={`https://ray.io`} name=\"docs\" />\n\n      <Widget\n        title=\"Ray Support Bot\"\n        subtitle=\"How can I help you today?\"\n        senderPlaceHolder=\"Ask me a question...\"\n        // fullScreenMode\n        handleNewUserMessage={handleNewUserMessage}\n      />\n    </Wrapper>\n\n  );\n}\n\nconst Message = ({ message, link, header }: APIResponse) => {\n  const d = new Date(); // for now\n  const time = useRef(d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }))\n\n  const isLocalLink = !link.includes(\"http\")\n  const pathname = useLocation().pathname\n\n  return <>\n    <div className=\"rcw-response\">\n      <div className=\"rcw-message-text\">\n        <p>{message}</p>\n        {isLocalLink ?\n          <Link to={link} onClick={() => {\n            if (link.includes(pathname)) {\n              // Force a reload\n              (window.frames[\"docs\" as any] as any).location = `https://docs.ray.io${link}`\n            }\n          }}> {header} </Link>\n          : <a href={link} target=\"_blank\" rel=\"noreferrer\">{header}</a>\n        }\n\n      </div>\n      <span className=\"rcw-timestamp\">{time.current}</span>\n    </div>\n  </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}